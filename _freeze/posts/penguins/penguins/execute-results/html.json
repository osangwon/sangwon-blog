{
  "hash": "f9bce9efe9b30bcc41a8d3bda108a5a3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"팔머펭귄 데이터 분석\"\nformat: html\njupyter: python3\n---\n\n\n## 7조: 오상원, 오윤지, 양현준\n\n## 팔머펭귄 데이터 불러오기\n\n::: {#331d2ce4 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\n```\n:::\n\n\n## 팔머펭귄 종\n\n::: {#10339a1f .cell execution_count=2}\n``` {.python .cell-code}\nset(penguins['species'])\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n{'Adelie', 'Chinstrap', 'Gentoo'}\n```\n:::\n:::\n\n\n## 팔머펭귄 데이터 종류\n\n::: {#76f6fc71 .cell execution_count=3}\n``` {.python .cell-code}\npenguins.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nIndex(['species', 'island', 'bill_length_mm', 'bill_depth_mm',\n       'flipper_length_mm', 'body_mass_g', 'sex', 'year'],\n      dtype='object')\n```\n:::\n:::\n\n\n## 1. Adelie\n\n### Adelie의 서식지\n\n::: {#16c4b97d .cell execution_count=4}\n``` {.python .cell-code}\nAdelie = penguins[penguins['species'] == 'Adelie']\n\nset(Adelie['island'])\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n{'Biscoe', 'Dream', 'Torgersen'}\n```\n:::\n:::\n\n\n### Adelie의 성별, 서식지별 분류\n\n### Biscoe_male\n\n::: {#b846046f .cell execution_count=5}\n``` {.python .cell-code}\nBiscoe_male = Adelie[(Adelie['island'] == 'Biscoe') & (Adelie['sex'] == 'male')]\nBiscoe_male.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>22.000000</td>\n      <td>22.000000</td>\n      <td>22.000000</td>\n      <td>22.000000</td>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>40.590909</td>\n      <td>19.036364</td>\n      <td>190.409091</td>\n      <td>4050.000000</td>\n      <td>2008.136364</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.006634</td>\n      <td>0.879689</td>\n      <td>6.463517</td>\n      <td>355.567956</td>\n      <td>0.774317</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>37.600000</td>\n      <td>17.200000</td>\n      <td>180.000000</td>\n      <td>3550.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>39.025000</td>\n      <td>18.600000</td>\n      <td>185.750000</td>\n      <td>3800.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>40.800000</td>\n      <td>18.900000</td>\n      <td>191.000000</td>\n      <td>4000.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>41.550000</td>\n      <td>19.500000</td>\n      <td>194.750000</td>\n      <td>4268.750000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>45.600000</td>\n      <td>21.100000</td>\n      <td>203.000000</td>\n      <td>4775.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Biscoe_female\n\n::: {#4609ee64 .cell execution_count=6}\n``` {.python .cell-code}\nBiscoe_female = Adelie[(Adelie['island'] == 'Biscoe') & (Adelie['sex'] == 'female')]\nBiscoe_female.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>22.000000</td>\n      <td>22.000000</td>\n      <td>22.000000</td>\n      <td>22.000000</td>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>37.359091</td>\n      <td>17.704545</td>\n      <td>187.181818</td>\n      <td>3369.318182</td>\n      <td>2008.136364</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.762212</td>\n      <td>1.091298</td>\n      <td>6.744567</td>\n      <td>343.470715</td>\n      <td>0.774317</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>34.500000</td>\n      <td>16.000000</td>\n      <td>172.000000</td>\n      <td>2850.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>35.750000</td>\n      <td>17.000000</td>\n      <td>184.250000</td>\n      <td>3150.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>37.750000</td>\n      <td>17.700000</td>\n      <td>187.000000</td>\n      <td>3375.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>38.475000</td>\n      <td>18.250000</td>\n      <td>191.750000</td>\n      <td>3693.750000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>40.500000</td>\n      <td>20.700000</td>\n      <td>199.000000</td>\n      <td>3900.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Dream_male\n\n::: {#8b3bbb7c .cell execution_count=7}\n``` {.python .cell-code}\nDream_male = Adelie[(Adelie['island'] == 'Dream') & (Adelie['sex'] == 'male')]\nDream_male.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>28.000000</td>\n      <td>28.000000</td>\n      <td>28.000000</td>\n      <td>28.000000</td>\n      <td>28.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>40.071429</td>\n      <td>18.839286</td>\n      <td>191.928571</td>\n      <td>4045.535714</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.748196</td>\n      <td>1.033276</td>\n      <td>6.803749</td>\n      <td>330.547636</td>\n      <td>0.860663</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>36.300000</td>\n      <td>17.000000</td>\n      <td>178.000000</td>\n      <td>3425.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>39.150000</td>\n      <td>18.100000</td>\n      <td>188.500000</td>\n      <td>3875.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>40.250000</td>\n      <td>18.650000</td>\n      <td>190.500000</td>\n      <td>3987.500000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>41.100000</td>\n      <td>19.275000</td>\n      <td>196.000000</td>\n      <td>4300.000000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>44.100000</td>\n      <td>21.200000</td>\n      <td>208.000000</td>\n      <td>4650.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Dream_female\n\n::: {#dcd87460 .cell execution_count=8}\n``` {.python .cell-code}\nDream_female = Adelie[(Adelie['island'] == 'Dream') & (Adelie['sex'] == 'female')]\nDream_female.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>27.000000</td>\n      <td>27.000000</td>\n      <td>27.000000</td>\n      <td>27.000000</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>36.911111</td>\n      <td>17.618519</td>\n      <td>187.851852</td>\n      <td>3344.444444</td>\n      <td>2008.037037</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.089043</td>\n      <td>0.897448</td>\n      <td>5.510156</td>\n      <td>212.056475</td>\n      <td>0.854017</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>32.100000</td>\n      <td>15.500000</td>\n      <td>178.000000</td>\n      <td>2900.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>36.000000</td>\n      <td>17.050000</td>\n      <td>185.000000</td>\n      <td>3212.500000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>36.800000</td>\n      <td>17.800000</td>\n      <td>188.000000</td>\n      <td>3400.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>37.850000</td>\n      <td>18.450000</td>\n      <td>191.000000</td>\n      <td>3487.500000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>42.200000</td>\n      <td>19.300000</td>\n      <td>202.000000</td>\n      <td>3700.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Torgersen_male\n\n::: {#296cf28d .cell execution_count=9}\n``` {.python .cell-code}\nTorgersen_male = Adelie[(Adelie['island'] == 'Torgersen') & (Adelie['sex'] == 'male')]\nTorgersen_male.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>23.000000</td>\n      <td>23.000000</td>\n      <td>23.000000</td>\n      <td>23.000000</td>\n      <td>23.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>40.586957</td>\n      <td>19.391304</td>\n      <td>194.913043</td>\n      <td>4034.782609</td>\n      <td>2008.043478</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.027496</td>\n      <td>1.082469</td>\n      <td>5.915412</td>\n      <td>372.471714</td>\n      <td>0.824525</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>34.600000</td>\n      <td>17.600000</td>\n      <td>181.000000</td>\n      <td>3325.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>38.850000</td>\n      <td>18.550000</td>\n      <td>192.000000</td>\n      <td>3787.500000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>41.100000</td>\n      <td>19.200000</td>\n      <td>195.000000</td>\n      <td>4000.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>42.650000</td>\n      <td>20.150000</td>\n      <td>198.000000</td>\n      <td>4275.000000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>46.000000</td>\n      <td>21.500000</td>\n      <td>210.000000</td>\n      <td>4700.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Torgersen_female\n\n::: {#8e5309c5 .cell execution_count=10}\n``` {.python .cell-code}\nTorgersen_female = Adelie[(Adelie['island'] == 'Torgersen') & (Adelie['sex'] == 'female')]\nTorgersen_female.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>24.000000</td>\n      <td>24.000000</td>\n      <td>24.000000</td>\n      <td>24.000000</td>\n      <td>24.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>37.554167</td>\n      <td>17.550000</td>\n      <td>188.291667</td>\n      <td>3395.833333</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.207887</td>\n      <td>0.879723</td>\n      <td>4.638958</td>\n      <td>259.144356</td>\n      <td>0.834058</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>33.500000</td>\n      <td>15.900000</td>\n      <td>176.000000</td>\n      <td>2900.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>35.850000</td>\n      <td>17.000000</td>\n      <td>186.000000</td>\n      <td>3200.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>37.600000</td>\n      <td>17.450000</td>\n      <td>189.000000</td>\n      <td>3400.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>39.125000</td>\n      <td>17.925000</td>\n      <td>191.000000</td>\n      <td>3606.250000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>41.100000</td>\n      <td>19.300000</td>\n      <td>196.000000</td>\n      <td>3800.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 종류 별 최대값 개체 및 값\n| 데이터 종류 | 개체 | 값 |\n|--------|------|------|\n| bill_length |   biscoe_male   |   40.590909   |\n| bill_depth |   Torgersen_male   |   19.391304   |\n| flipper_length |   Torgersen_male   |   194.913043   |\n| body_mass |   biscoe_male   |   4050.000000   |\n\n\n## 2. Gentoo\n\n### Gentoo의 서식지\n\n::: {#08a6338b .cell execution_count=11}\n``` {.python .cell-code}\nGentoo = penguins[penguins['species'] == 'Gentoo']\n\nset(Gentoo['island'])\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n{'Biscoe'}\n```\n:::\n:::\n\n\n### Gentoo의 성별, 서식지별 분류\n\n### Biscoe_male\n\n::: {#476dd1ee .cell execution_count=12}\n``` {.python .cell-code}\nGentoo_male = Gentoo[Gentoo['sex'] == 'male']\nGentoo_male.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>61.000000</td>\n      <td>61.000000</td>\n      <td>61.000000</td>\n      <td>61.000000</td>\n      <td>61.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>49.473770</td>\n      <td>15.718033</td>\n      <td>221.540984</td>\n      <td>5484.836066</td>\n      <td>2008.065574</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.720594</td>\n      <td>0.741060</td>\n      <td>5.673252</td>\n      <td>313.158596</td>\n      <td>0.793071</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>44.400000</td>\n      <td>14.100000</td>\n      <td>208.000000</td>\n      <td>4750.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>48.100000</td>\n      <td>15.200000</td>\n      <td>218.000000</td>\n      <td>5300.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>49.500000</td>\n      <td>15.700000</td>\n      <td>221.000000</td>\n      <td>5500.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>50.500000</td>\n      <td>16.100000</td>\n      <td>225.000000</td>\n      <td>5700.000000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>59.600000</td>\n      <td>17.300000</td>\n      <td>231.000000</td>\n      <td>6300.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Biscoe_female\n\n::: {#fc996c2a .cell execution_count=13}\n``` {.python .cell-code}\nGentoo_female = Gentoo[Gentoo['sex'] == 'female']\nGentoo_female.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>58.000000</td>\n      <td>58.000000</td>\n      <td>58.000000</td>\n      <td>58.000000</td>\n      <td>58.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>45.563793</td>\n      <td>14.237931</td>\n      <td>212.706897</td>\n      <td>4679.741379</td>\n      <td>2008.068966</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.051247</td>\n      <td>0.540249</td>\n      <td>3.897856</td>\n      <td>281.578294</td>\n      <td>0.791669</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>40.900000</td>\n      <td>13.100000</td>\n      <td>203.000000</td>\n      <td>3950.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>43.850000</td>\n      <td>13.800000</td>\n      <td>210.000000</td>\n      <td>4462.500000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>45.500000</td>\n      <td>14.250000</td>\n      <td>212.000000</td>\n      <td>4700.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>46.875000</td>\n      <td>14.600000</td>\n      <td>215.000000</td>\n      <td>4875.000000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>50.500000</td>\n      <td>15.500000</td>\n      <td>222.000000</td>\n      <td>5200.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 종류 별 최대값 개체 및 값\n| 데이터 종류 | 개체 | 값 |\n|--------|------|------|\n| bill_length |   male   |   49.473770   |\n| bill_depth |   male   |   15.718033   |\n| flipper_length |   male   |   221.540984   |\n| body_mass |   male   |   5484.836066   |\n\n\n## 3. Chinstrap\n\n### Chinstrap의 서식지\n\n::: {#998c4e29 .cell execution_count=14}\n``` {.python .cell-code}\nChinstrap = penguins[penguins['species'] == 'Chinstrap']\n\nset(Chinstrap['island'])\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n{'Dream'}\n```\n:::\n:::\n\n\n### Chinstrap의 성별, 서식지별 분류\n\n### Dream_male\n\n::: {#b0d18b1e .cell execution_count=15}\n``` {.python .cell-code}\nChinstrap_male = Chinstrap[Chinstrap['sex'] == 'male']\nChinstrap_male.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>34.000000</td>\n      <td>34.000000</td>\n      <td>34.000000</td>\n      <td>34.000000</td>\n      <td>34.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>51.094118</td>\n      <td>19.252941</td>\n      <td>199.911765</td>\n      <td>3938.970588</td>\n      <td>2007.970588</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.564558</td>\n      <td>0.761273</td>\n      <td>5.976558</td>\n      <td>362.137550</td>\n      <td>0.869876</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>48.500000</td>\n      <td>17.500000</td>\n      <td>187.000000</td>\n      <td>3250.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>50.050000</td>\n      <td>18.800000</td>\n      <td>196.000000</td>\n      <td>3731.250000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>50.950000</td>\n      <td>19.300000</td>\n      <td>200.500000</td>\n      <td>3950.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>51.975000</td>\n      <td>19.800000</td>\n      <td>203.000000</td>\n      <td>4100.000000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>55.800000</td>\n      <td>20.800000</td>\n      <td>212.000000</td>\n      <td>4800.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Dream_female\n\n::: {#589cbe99 .cell execution_count=16}\n``` {.python .cell-code}\nChinstrap_female = Chinstrap[Chinstrap['sex'] == 'female']\nChinstrap_female.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>34.000000</td>\n      <td>34.000000</td>\n      <td>34.000000</td>\n      <td>34.000000</td>\n      <td>34.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>46.573529</td>\n      <td>17.588235</td>\n      <td>191.735294</td>\n      <td>3527.205882</td>\n      <td>2007.970588</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.108669</td>\n      <td>0.781128</td>\n      <td>5.754096</td>\n      <td>285.333912</td>\n      <td>0.869876</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>40.900000</td>\n      <td>16.400000</td>\n      <td>178.000000</td>\n      <td>2700.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>45.425000</td>\n      <td>17.000000</td>\n      <td>187.250000</td>\n      <td>3362.500000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>46.300000</td>\n      <td>17.650000</td>\n      <td>192.000000</td>\n      <td>3550.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>47.375000</td>\n      <td>18.050000</td>\n      <td>195.750000</td>\n      <td>3693.750000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>58.000000</td>\n      <td>19.400000</td>\n      <td>202.000000</td>\n      <td>4150.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 종류 별 최대값 개체 및 값\n| 데이터 종류 | 개체 | 값 |\n|--------|------|------|\n| bill_length |   male   |   51.094118   |\n| bill_depth |   male   |   19.252941   |\n| flipper_length |   male   |   199.911765   |\n| body_mass |   male   |   3938.970588   |\n\n## Adelie의 서식지별 최대 평균 비교\n\n::: {#686d407d .cell execution_count=17}\n``` {.python .cell-code}\ncomp = pd.DataFrame({\n    'bill_length' : ['biscoe', 'Torgersen', 'Dream'],\n    'bill_depth' : ['Torgersen', 'biscoe', 'Dream'],\n    'flipper_length' : ['Torgersen', 'Dream', 'biscoe'],\n    'body_mass' : ['biscoe', 'Dream', 'Torgersen'],\n    }, index = ['first', 'second', 'third'])\n\ncomp\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length</th>\n      <th>bill_depth</th>\n      <th>flipper_length</th>\n      <th>body_mass</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>first</th>\n      <td>biscoe</td>\n      <td>Torgersen</td>\n      <td>Torgersen</td>\n      <td>biscoe</td>\n    </tr>\n    <tr>\n      <th>second</th>\n      <td>Torgersen</td>\n      <td>biscoe</td>\n      <td>Dream</td>\n      <td>Dream</td>\n    </tr>\n    <tr>\n      <th>third</th>\n      <td>Dream</td>\n      <td>Dream</td>\n      <td>biscoe</td>\n      <td>Torgersen</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 게체별 최대 평균 비교\n\n::: {#e28bc44f .cell execution_count=18}\n``` {.python .cell-code}\ncomp = pd.DataFrame({\n    'bill_length' : ['Chinstrap', 'Adelie', 'Gentoo'],\n    'bill_depth' : ['Adelie', 'Chinstrap', 'Gentoo'],\n    'flipper_length' : ['Chinstrap', 'Gentoo', 'Adelie'],\n    'body_mass' : ['Chinstrap', 'Adelie', 'Gentoo'],\n    }, index = ['first', 'second', 'third'])\n\ncomp\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length</th>\n      <th>bill_depth</th>\n      <th>flipper_length</th>\n      <th>body_mass</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>first</th>\n      <td>Chinstrap</td>\n      <td>Adelie</td>\n      <td>Chinstrap</td>\n      <td>Chinstrap</td>\n    </tr>\n    <tr>\n      <th>second</th>\n      <td>Adelie</td>\n      <td>Chinstrap</td>\n      <td>Gentoo</td>\n      <td>Adelie</td>\n    </tr>\n    <tr>\n      <th>third</th>\n      <td>Gentoo</td>\n      <td>Gentoo</td>\n      <td>Adelie</td>\n      <td>Gentoo</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 결론\n### 서식지 분석\nAdelie는 Biscoe, Dream, Torgersen 3 종류의 섬에 서식하지만, Gentoo는 Biscoe, Chinstrap는 Dream 에서만 서식한다.\n\n### Adelie의 서식지별 분석\n1. 부리 길이는 **biscoe**이 가장 길고, **Dream**가 가장 짧다.\n2. 부리 깊이는 **Torgersen**이 가장 깊고, **Dream**가 가장 얕다.\n3. 날개 길이는 **Torgersen**이 가장 길고, **biscoe**가 가장 짧다.\n4. 무게는 **biscoe**이 가장 높고, **Torgersen**가 가장 낮다.\n\n### 개체별 데이터 분석\n1. 부리 길이는 **Chinstrap**이 가장 길고, **Gentoo**가 가장 짧다.\n2. 부리 깊이는 **Adelie**이 가장 깊고, **Gentoo**가 가장 얕다.\n3. 날개 길이는 **Chinstrap**이 가장 길고, **Adelie**가 가장 짧다.\n4. 무게는 **Chinstrap**이 가장 높고, **Gentoo**가 가장 낮다.\n\n",
    "supporting": [
      "penguins_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}